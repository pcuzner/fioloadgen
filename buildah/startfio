#!/bin/bash

SCRIPT_NAME=$(basename $0)


acquire_lock() {
    if [ -f ./fiojob.lock ]; then
        exit 16
    else
        touch ./fiojob.lock
    fi
}

release_lock() {
    rm -f ./fiojob.lock
}

get_max_workers() {
    workers_file_name="$1_worker-ip.list"
    echo $(grep -c "" ${workers_file_name})
}

run_fio() {
    acquire_lock
    workers_file_name="$1_worker-ip.list"
    # build a client list based on the requested worker count
    cat ${workers_file_name} | head -n $2 > ./clients

    # run the fio job across the clients
    fio --client=./clients fio/jobs/"$3" --output-format=json --output=/reports/"$4"

    release_lock
}

usage() {
    echo -e "Usage: ${SCRIPT_NAME} [-puwh]"
    echo -e "\t-h ... display usage information"
    echo -e "\t-p ... fio profile name (from /fio/jobs directory)"
    echo -e "\t-s ... storageclass to use for the workers"
    echo -e "\t-o ... output file name to use (within /reports)"
    echo -e "\t-w ... number of workers to run the workload against"

    echo "e.g."
    echo -e "> ./${SCRIPT_NAME} -p randrw7030.job -s standard -w 5 -o randrw7030-output.json\n"
}

main() {

    while getopts "p:s:o:w:h" option; do
        case "${option}" in
            h)
                usage
                exit 0
                ;;
            p)
                profile=${OPTARG}
                ;;
            s)
 		        storageclass=${OPTARG}
                ;;
            o)
 		        outfile=${OPTARG}
                ;;
            w)
		        workers=${OPTARG}
	            if  ! [ "$workers" -eq "$workers" ] 2>/dev/null ; then
                    echo "invalid -w parameter"
                    exit 1
		        fi
                ;;
            :)
		        echo "Expected argument for -${OPTARG} missing"
 		        exit 4
                ;;
            *)
                echo "Unsupported option."
                usage
                exit 8
                ;;
        esac
        args_given=0
    done

    # workers is numeric
    # if [[ $workers -lt 1 || $workers -gt $max_workers ]]; then
    #     workers=${max_workers}
    # fi

    if [[ ! -v args_given ]]; then
        # got to give me something!
        usage
        exit 4
    fi

    if [[ ! -v storageclass ]]; then
	    # storageclass must be given
        echo "Missing storageclass (-s) value"
	    exit 4
    fi
    if [[ ! -v profile ]]; then
	    # profile must be given
        echo "Missing profile (-p) value"
	    exit 4
    fi

    max_workers=$(get_max_workers ${storageclass})
    # -v tests needs bash 4.2 or later
    if [[ ! -v workers ]]; then
	    workers=$max_workers
    fi

    if [[ $workers -lt 1 || $workers -gt $max_workers ]]; then
        workers=${max_workers}
    fi

    if [[ ! -v outfile ]]; then
	    outfile="${profile}-$(date +%s).json"
    fi

    run_fio "${storageclass}" "${workers}" "${profile}" "${outfile}"
}

main $@
